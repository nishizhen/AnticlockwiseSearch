# .github/workflows/build.yml

name: Build AnticlockwiseSearch Docker Images

on:
  push:
    branches:
      - main # 当代码推送到 'main' 分支时触发此工作流
  pull_request:
    branches:
      - main # 当有针对 'main' 分支的 PR 时触发此工作流

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机运行作业

    steps:
      - name: Checkout repository # 步骤1: 检出 GitHub 仓库代码
        uses: actions/checkout@v4

      - name: Set up Docker Buildx # 步骤2: 设置 Docker Buildx (用于多平台构建和缓存)
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (Optional) # 步骤3: 登录 Docker Hub (如果你想把镜像推送到公共仓库)
        # 这一步是可选的。如果你只想在 GitHub Actions 环境中构建而不推送，可以注释掉。
        # 如果要推送，请确保你的 GitHub 仓库 Secrets 中配置了 DOCKER_USERNAME 和 DOCKER_PASSWORD。
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image # 步骤4: 构建并推送后端 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Dockerfile 所在的目录
          file: ./backend/Dockerfile # Dockerfile 路径
          push: true # 设置为 false 如果你不想推送到 Docker Hub，只在 Actions 中构建
          tags: nishizhen/anticlockwise_backend:latest
          # 如果你想推送到 Docker Hub, 'push' 设为 true, 并确保登录步骤已启用
          cache-from: type=gha,scope=backend-build # 开启 GitHub Actions 缓存 (可选，提高构建速度)
          cache-to: type=gha,scope=backend-build,mode=max

      - name: Build and push frontend image # 步骤5: 构建并推送前端 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: ./frontend # Dockerfile 所在的目录
          file: ./frontend/Dockerfile # Dockerfile 路径
          push: true # 设置为 false 如果你不想推送到 Docker Hub，只在 Actions 中构建
          tags: nishizhen/anticlockwise_frontend:latest
          # 如果你想推送到 Docker Hub, 'push' 设为 true, 并确保登录步骤已启用
          cache-from: type=gha,scope=frontend-build
          cache-to: type=gha,scope=frontend-build,mode=max
